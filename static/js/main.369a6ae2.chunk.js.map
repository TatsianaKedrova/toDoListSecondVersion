{"version":3,"sources":["serviceWorker.ts","state/app-reducer.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","api/todolist-api.ts","state/todolist-reducer.ts","utils/error-utils.ts","state/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/TodolistsList/TodoList/TodoList.tsx","components/TodolistsList/TodolistsList.tsx","state/login-reducer.ts","features/Login/Login.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","status","error","setAppStatusAC","type","setAppErrorAC","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoApi","get","title","post","todolistId","delete","put","todoListId","taskId","taskTitle","model","authApi","loginInfo","ChangeTodolistStatusAC","handleServerAppError","data","messages","length","handleServerNetworkError","message","initState","updateTaskTC","domainModel","getState","task","tasks","find","id","apiModel","priority","description","deadline","completed","startDate","then","res","resultCode","alert","catch","console","warn","AddItemForm","React","memo","useState","setTitle","setError","addItemHandler","trim","addItem","TextField","value","onChange","e","currentTarget","onKeyPress","key","className","label","helperText","disabled","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","onTitleChangeHandler","useCallback","newValue","Completed","Checkbox","checked","newStatusValue","New","Delete","TodoList","useEffect","SetTaskAC","items","taskID","addTask","changeTodoListTitle","setAllFilterValue","changeTodoListFilter","setActiveFilterValue","setCompleteFilterValue","removeTodoList","todoListStatus","map","style","paddingTop","Button","marginRight","size","todoListFilter","TodolistsList","demo","todoLists","todoListID","thunk","RemoveTaskAC","item","addTaskTC","newStatus","addTodoList","todolist","addTodoListTC","titleTL","ChangeTodoListTitleAC","changeTodolistTitleTC","newFilterValue","action","ChangeTodoListFilterAC","todoListComponents","tl","newArr","todoList","filter","getTasksForTodoList","Grid","Paper","padding","todolistStatus","container","spacing","email","password","rememberMe","Login","formik","useFormik","initialValues","validate","values","log","errors","test","onSubmit","userId","loginAC","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","AppWithRedux","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","to","rootReducer","combineReducers","newTask","copyState","updatedTasks","forEach","newTodoList","login","loginState","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.369a6ae2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n//reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch(action.type) {\r\n        case \"APP/SET-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: \"APP/SET-STATUS\", status } as const);\r\nexport const setAppErrorAC = (error: null | string) => ({ type: \"APP/SET-ERROR\", error } as const);\r\n\r\n//action types\r\nexport type AppSetStatusType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>;\r\n\r\nexport type ActionsType = AppSetStatusType | SetAppErrorType;","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch();\r\n\r\n    const isOpen = error !== null;\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={5000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3356848e-44a4-478d-85f0-1e1fabb15c46'\r\n    }\r\n});\r\n\r\nexport const todoApi = {\r\n    //methods on todoLists\r\n    fetchTodoLists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    addTodo(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    removeTodo(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    changeTodo(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    //methods on tasks\r\n    fetchTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    removeTask(todoListId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoListId}/tasks/${taskId}`)\r\n    },\r\n    addTask(todoListId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todoListId}/tasks`,{title:taskTitle} )\r\n    },\r\n    changeTask(todoListId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todoListId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    logIn(loginInfo: LogInType) {\r\n        return instance.post<ResponseType<{ userId: number }>>(\"auth/login\", loginInfo)\r\n    }\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: number\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LogInType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\n\r\n\r\n","import {todoApi, TodolistType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppSetStatusType, RequestStatusType, setAppErrorAC, SetAppErrorType, setAppStatusAC} from \"./app-reducer\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"complete\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    todolistStatus: RequestStatusType\r\n}\r\n\r\nlet initialState: Array<TodolistDomainType> = [];\r\n\r\n//todolist reducer\r\nexport const todolistReducer = (todoLists: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = [...todoLists];\r\n            return copyState.filter(tl => tl.id !== action.todoListID);\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            let copyState = [...todoLists];\r\n            const newTodoList: TodolistDomainType = {...action.todolist, filter: \"all\", todolistStatus: \"idle\"};\r\n            /*{\r\n                id: action.todoListId,\r\n                addedDate: new Date().getDate(),\r\n                order: Number(new Date()),\r\n                title: action.titleTL,\r\n                filter: \"all\"\r\n            }*/\r\n            return [newTodoList, ...copyState];\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            let copyState = [...todoLists];\r\n            return copyState.map(tl => tl.id === action.todoListId ? {...tl, title: action.titleTL} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            let copyState = [...todoLists];\r\n            return copyState.map(tl => tl.id === action.todoListId ? {...tl, filter: action.newFilterValue} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-STATUS\": {\r\n            const copyState = [...todoLists];\r\n            return copyState.map(tl => tl.id === action.todoListId ? {...tl, todolistStatus: action.status }: tl);\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todoLists.map(tl => ({...tl, filter: 'all', todolistStatus: \"idle\"}));\r\n        }\r\n\r\n        default:\r\n            return todoLists;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const RemoveTodoListAC = (todoListID: string) => ({type: \"REMOVE-TODOLIST\", todoListID} as const);\r\nexport const AddTodoListAC = (todolist: TodolistType) => ({type: \"ADD-TODOLIST\", todolist} as const);\r\nexport const ChangeTodoListTitleAC = (titleTL: string, todoListId: string) => ({\r\n    type: \"CHANGE-TODOLIST-TITLE\",\r\n    titleTL,\r\n    todoListId\r\n} as const);\r\nexport const ChangeTodoListFilterAC = (newFilterValue: FilterValuesType, todoListId: string) => ({\r\n    type: \"CHANGE-TODOLIST-FILTER\",\r\n    newFilterValue,\r\n    todoListId\r\n} as const);\r\nexport const SetTodoListsAC = (todoLists: Array<TodolistType>) => ({type: \"SET-TODOLISTS\", todoLists} as const);\r\nexport const ChangeTodolistStatusAC = (todoListId: string, status: RequestStatusType) => ({type: \"CHANGE-TODOLIST-STATUS\",todoListId, status } as const);\r\n\r\n//thunk\r\nexport const fetchTodoListsTC = () => {\r\n    return (dispatch: DispatchTodoThunkType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todoApi.fetchTodoLists()\r\n            .then(res => {\r\n                dispatch(SetTodoListsAC(res.data))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n    }\r\n}\r\nexport const removeTodoListTC = (todoListId: string) => {\r\n    return (dispatch: DispatchTodoThunkType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(ChangeTodolistStatusAC(todoListId, \"loading\"))\r\n        todoApi.removeTodo(todoListId)\r\n            .then( (res) => {\r\n                if(res.data.resultCode === 0) {\r\n                    dispatch(RemoveTodoListAC(todoListId))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                    dispatch(ChangeTodolistStatusAC(todoListId, \"succeeded\"))\r\n                } else {\r\n                    if(res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setAppErrorAC(\"Some error occurred\"))\r\n                    }\r\n                    dispatch(setAppStatusAC(\"failed\"))\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport const addTodoListTC = (title: string) => (dispatch: DispatchTodoThunkType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoApi.addTodo(title)\r\n        .then( res => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(AddTodoListAC(res.data.data.item))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                if(res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC(\"Some error occurred!\"))\r\n                }\r\n                dispatch(setAppStatusAC(\"failed\"))\r\n            }\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todoListId: string, title: string) => (dispatch: DispatchTodoThunkType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoApi.changeTodo(todoListId, title)\r\n        .then( () => {\r\n            dispatch(ChangeTodoListTitleAC(title, todoListId))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n}\r\n\r\n//action types\r\nexport type RemoveTodolistType = ReturnType<typeof RemoveTodoListAC>;\r\nexport type AddTodoListType = ReturnType<typeof AddTodoListAC>;\r\nexport type ChangeTodoListTitleType = ReturnType<typeof ChangeTodoListTitleAC>;\r\nexport type ChangeTodoListFilterType = ReturnType<typeof ChangeTodoListFilterAC>;\r\nexport type SetTodoListsType = ReturnType<typeof SetTodoListsAC>;\r\nexport type ChangeTodolistStatusType = ReturnType<typeof ChangeTodolistStatusAC>;\r\n\r\nexport type ActionType =\r\n    RemoveTodolistType\r\n    | AddTodoListType\r\n    | ChangeTodoListTitleType\r\n    | ChangeTodoListFilterType\r\n    | SetTodoListsType\r\n    | ChangeTodolistStatusType\r\n\r\nexport type DispatchTodoThunkType = Dispatch<ActionType | AppSetStatusType | SetAppErrorType>;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {AppSetStatusType, setAppErrorAC, SetAppErrorType, setAppStatusAC} from \"../state/app-reducer\";\r\nimport { ResponseType } from \"../api/todolist-api\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<AppSetStatusType | SetAppErrorType>) => {\r\n    if(data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred!\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n};\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch:Dispatch<AppSetStatusType | SetAppErrorType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : \"Some error occurred!\"));\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import {AppSetStatusType, setAppErrorAC, SetAppErrorType, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<AppSetStatusType | SetAppErrorType>) => {\r\n    if(data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC(\"Some error occurred!\"))\r\n    }\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}*/\r\n","import {AddTodoListType, RemoveTodolistType, SetTodoListsType} from \"./todolist-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType, todoApi, UpdateTaskModelType} from \"../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {AppSetStatusType, SetAppErrorType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\n//types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nconst initState: TasksStateType = {};\r\n\r\n// tasks reducer\r\nexport const tasksReducer = (state: TasksStateType = initState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-TASK\":\r\n            console.log(action)\r\n            let newTask = action.task;\r\n            const copyState = {...state};\r\n            const updatedTasks = [newTask, ...copyState[newTask.todoListId]];\r\n            return {\r\n                ...copyState,\r\n                [newTask.todoListId]: updatedTasks\r\n            }\r\n        case \"REMOVE-TASK\": {\r\n            let copyState = {...state};\r\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.taskID)\r\n            return copyState;\r\n        }\r\n        case \"UPDATE-TASK\": {\r\n            let copyState = {...state};\r\n            copyState[action.todoListId] = copyState[action.todoListId].map(task => task.id === action.taskID ? {\r\n                ...task,\r\n                ...action.model\r\n            } : task);\r\n            return copyState;\r\n        }\r\n\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state};\r\n            delete copyState[action.todoListID]\r\n            return copyState;\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state};\r\n            action.todoLists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState;\r\n        }\r\n        case \"SET-TASK\": {\r\n            return {...state, [action.todoListId]: action.tasks}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const AddTaskAC = (task: TaskType) => ({type: \"ADD-TASK\", task} as const);\r\nexport const RemoveTaskAC = (taskID: string, todoListId: string) => ({\r\n    type: \"REMOVE-TASK\",\r\n    taskID,\r\n    todoListId\r\n} as const);\r\nexport const UpdateTaskAC = (taskID: string, model: UpdateDomainTaskModelType, todoListId: string) => ({\r\n    type: \"UPDATE-TASK\",\r\n    taskID,\r\n    model,\r\n    todoListId\r\n} as const);\r\n\r\nexport const SetTaskAC = (tasks: Array<TaskType>, todoListId: string) => ({\r\n    type: \"SET-TASK\",\r\n    tasks,\r\n    todoListId\r\n} as const);\r\n\r\n//thunk\r\nexport const fetchTasksTC = (todoListId: string) => {\r\n    return (dispatch: DispatchTaskThunkType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todoApi.fetchTasks(todoListId)\r\n            .then(res => {\r\n                dispatch(SetTaskAC(res.data.items, todoListId))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n            .catch( (error) => {\r\n               handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (todoListId: string, taskTitle: string) => {\r\n    return (dispatch: DispatchTaskThunkType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todoApi.addTask(todoListId, taskTitle)\r\n            .then(res => {\r\n\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(AddTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch( (error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (todoListId: string, taskId: string) => (dispatch: DispatchTaskThunkType) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoApi.removeTask(todoListId, taskId)\r\n        .then((res) => {\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(RemoveTaskAC(taskId, todoListId))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch( (error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) => (dispatch: DispatchTaskThunkType, getState: () => AppRootStateType) => {\r\n\r\n    const state = getState();\r\n    const task = state.tasks[todoListId].find(task => task.id === taskId)\r\n\r\n    if (!task) {\r\n        console.warn(\"Task not found\");\r\n        return;\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        title: task.title,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        description: task.description,\r\n        deadline: task.deadline,\r\n        completed: task.completed,\r\n        startDate: task.startDate,\r\n        ...domainModel\r\n    }\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todoApi.changeTask(todoListId, taskId, apiModel)\r\n        .then(res => {\r\n            if(res.data.resultCode === 0) {\r\n                alert(\"Taniusha is genius!\")\r\n                // dispatch(UpdateTaskAC(taskId, domainModel, todoListId))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch( (error) => {\r\n            handleServerNetworkError(error, dispatch);\r\n        })\r\n}\r\n\r\n//action types\r\nexport type AddTaskType = ReturnType<typeof AddTaskAC>;\r\nexport type RemoveTaskType = ReturnType<typeof RemoveTaskAC>;\r\nexport type ChangeTaskStatusType = ReturnType<typeof UpdateTaskAC>;\r\nexport type SetTaskType = ReturnType<typeof SetTaskAC>;\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    description?: string\r\n    title?: string\r\n    completed?: boolean\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n\r\n}\r\n\r\ntype ActionType =\r\n    AddTaskType\r\n    | RemoveTaskType\r\n    | ChangeTaskStatusType\r\n    | AddTodoListType\r\n    | RemoveTodolistType\r\n    | SetTodoListsType\r\n    | SetTaskType\r\n\r\nexport type DispatchTaskThunkType = Dispatch<ActionType | AppSetStatusType | SetAppErrorType>;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(title);\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                className={error ? \"error\" : \"\"}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton onClick={addItemHandler} color={\"primary\"}>\r\n                <AddBox  />\r\n            </IconButton>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItemForm;","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        setTitle(title)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.changeTitle(title);\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n            />\r\n\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n});\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId:string) => void\r\n    changeTaskStatus: (taskId:string, newStatusValue: TaskStatuses) => void\r\n    changeTaskTitle: (taskId: string, newValue: string) => void\r\n}\r\n\r\nexport const Task = React.memo((\r\n    {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle\r\n    }: TaskPropsType) => {\r\n\r\n    const onClickHandler = () => removeTask(task.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStatusValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New);\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(newValue, task.id);\r\n    }, [changeTaskTitle, task.id])\r\n    return(\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan title={task.title} changeTitle={onTitleChangeHandler} />\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n});","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../AddItemForm/AddItemForm\";\nimport EditableSpan from \"../../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"../../Task/Task\";\nimport {TaskStatuses, TaskType} from \"../../../api/todolist-api\";\nimport {FilterValuesType} from \"../../../state/todolist-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchTasksTC} from \"../../../state/tasks-reducer\";\nimport {RequestStatusType} from \"../../../state/app-reducer\";\n\n\n// \ntype TodoListPropsType = {\n    id: string\n    title: string,\n    todoListFilter: FilterValuesType,\n    todoListStatus: RequestStatusType,\n    tasks: Array<TaskType>,\n    addTask: (title: string, todoListID: string) => void,\n    removeTask: (taskID: string, todoListID: string) => void,\n    removeTodoList: (todoListID: string) => void,\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void,\n    changeTaskStatus: (taskID: string, newStatus: TaskStatuses, todoListID: string) => void,\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void,\n    changeTodoListTitle: (title: string, todoListID: string) => void\n}\n\n\nconst TodoList = React.memo((props: TodoListPropsType) => {\n\n    const dispatch = useDispatch();\n    useEffect( () => {\n        dispatch(fetchTasksTC(props.id));\n    }, [] )\n\n    const removeTask = useCallback((taskId: string) => props.removeTask(taskId, props.id), [props.removeTask, props.id]);\n    const changeTaskStatus = useCallback((taskId: string, newStatusValue: TaskStatuses) => props.changeTaskStatus(taskId, newStatusValue, props.id), [props.changeTaskStatus, props.id]);\n    const changeTaskTitle = useCallback((title: string, taskID: string) => {\n        props.changeTaskTitle(taskID, title, props.id)\n    }, [props.changeTaskTitle, props.id]);\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id);\n    }, [props.addTask, props.id]);\n\n    const removeTodoList = () => {\n        props.removeTodoList(props.id)\n    }\n\n    const changeTodoListTitle = useCallback((title: string) => {\n        props.changeTodoListTitle(title, props.id)\n    }, [props.changeTodoListTitle, props.id]);\n    const setAllFilterValue = useCallback(() => props.changeTodoListFilter(\"all\", props.id), [props.changeTodoListFilter, props.id]);\n    const setActiveFilterValue = useCallback(() => props.changeTodoListFilter(\"active\", props.id), [props.changeTodoListFilter, props.id]);\n    const setCompleteFilterValue = useCallback(() => props.changeTodoListFilter(\"complete\", props.id), [props.changeTodoListFilter, props.id]);\n\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n\n                <IconButton onClick={removeTodoList} disabled={props.todoListStatus === \"loading\"}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={addTask} disabled={props.todoListStatus === \"loading\"}/>\n            <div>\n                {\n                    props.tasks.map(task => <Task\n                        key={task.id}\n                        task={task}\n                        removeTask={removeTask}\n                        changeTaskStatus={changeTaskStatus}\n                        changeTaskTitle={changeTaskTitle}\n                    />)\n                }\n            </div>\n\n            <div style={{ paddingTop: \"10px\"}}>\n                <Button\n                    style={{marginRight: \"5px\"}}\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.todoListFilter === \"all\" ? \"outlined\" : \"contained\"}\n                    onClick={setAllFilterValue}\n                >All\n                </Button>\n                <Button\n                    style={{marginRight: \"5px\"}}\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.todoListFilter === \"active\" ? \"outlined\" : \"contained\"}\n                    onClick={setActiveFilterValue}\n                >Active\n                </Button>\n                <Button\n\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.todoListFilter === \"complete\" ? \"outlined\" : \"contained\"}\n                    onClick={setCompleteFilterValue}\n                >Complete\n                </Button>\n\n            </div>\n        </div>\n\n    );\n});\n\nexport default TodoList;\n\n\n\n\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {\r\n    addTodoListTC,\r\n    ChangeTodoListFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodoListTC,\r\n    TodolistDomainType\r\n} from \"../../state/todolist-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from \"../../state/tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../api/todolist-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport TodoList from \"./TodoList/TodoList\";\r\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\r\n\r\nexport type TodolistsListPropsType = {\r\n    demo: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTodoListsTC());\r\n    }, []);\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        const thunk = removeTaskTC(todoListID, taskID);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        const thunk = addTaskTC(todoListId, title)\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newStatus: TaskStatuses, todoListID: string) => {\r\n        const thunk = updateTaskTC(taskID, {status: newStatus}, todoListID);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n        const thunk = updateTaskTC(taskID, {title}, todoListID);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        const thunk = removeTodoListTC(todoListID)\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const thunk = addTodoListTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\r\n        const thunk = changeTodolistTitleTC(todoListID, title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    const changeTodoListFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        const action = ChangeTodoListFilterAC(newFilterValue, todoListID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    function getTasksForTodoList(todoList: TodolistDomainType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(task => task.status === TaskStatuses.New)\r\n            case 'complete':\r\n                return tasks[todoList.id].filter(task => task.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        let newArr = getTasksForTodoList(tl)\r\n        return (\r\n            <Grid item={true} key={tl.id}>\r\n                <Paper elevation={6} style={{padding: \"20px\"}}>\r\n                    <TodoList\r\n\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        todoListFilter={tl.filter}\r\n                        todoListStatus={tl.todolistStatus}\r\n                        tasks={newArr}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return <>\r\n        <Grid container={true} style={{padding: \"20px 0px\"}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container={true} spacing={5}>\r\n            {todoListComponents}\r\n        </Grid>\r\n    </>\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authApi, LogInType} from \"../api/todolist-api\";\r\nimport {AppSetStatusType, SetAppErrorType, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n}\r\n\r\n//login reducer\r\nexport const loginReducer = (loginState: LogInType = initialState, action: ActionType):LogInType => {\r\n    switch (action.type) {\r\n        case \"SET-LOGIN\":\r\n            return {...loginState, email: action.loginInfo.email, password: action.loginInfo.password, rememberMe: action.loginInfo.rememberMe}\r\n        default:\r\n            return loginState;\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const loginAC = (loginInfo: LogInType) => ({type: \"SET-LOGIN\", loginInfo } as const);\r\n\r\n//action types\r\nexport type LoginACType = ReturnType<typeof loginAC>;\r\nexport type ActionType = LoginACType;\r\n\r\n//thunk\r\nexport const loginTC = (loginInfo: LogInType) => (dispatch: ThunkLoginDispatch) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authApi.logIn(loginInfo)\r\n        .then( (res) => {\r\n            console.log(res.data.data.userId)\r\n            if(res.data.resultCode === 0) {\r\n                dispatch(loginAC(loginInfo))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\ntype ThunkLoginDispatch = Dispatch<ActionType | AppSetStatusType | SetAppErrorType>","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginTC} from \"../../state/login-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\nexport const Login = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values)  => {\r\n            console.log(\"validate\")\r\n\r\n            const errors: FormikErrorType = {};\r\n\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length < 8) {\r\n            errors.password = 'Password must be 8 characters or more';\r\n        }\r\n        return errors;\r\n    },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            // alert(JSON.stringify(values));\r\n        },\r\n    });\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}>here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        type=\"email\"\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps(\"email\")}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ? <div style={{\"color\":\"red\"}}>{formik.errors.email}</div> : null}\r\n\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps(\"password\")}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password ? <div style={{\"color\":\"red\"}}>{formik.errors.password}</div> : null}\r\n\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox\r\n                            {...formik.getFieldProps(\"rememberMe\")} checked={formik.values.rememberMe}\r\n                        />}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton,Toolbar, Typography} from \"@material-ui/core\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport ErrorSnackbar from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {TodolistsList} from \"../components/TodolistsList/TodolistsList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n};\r\n\r\nfunction AppWithRedux({demo = false}: AppPropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <ErrorSnackbar/>\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress color={\"secondary\"}/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistReducer} from \"./todolist-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {loginReducer} from \"./login-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todolistReducer,\r\n    app: appReducer,\r\n    login: loginReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppWithRedux from \"./app/AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n       <BrowserRouter>\n           <AppWithRedux />\n       </BrowserRouter>\n    </Provider>\n,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}