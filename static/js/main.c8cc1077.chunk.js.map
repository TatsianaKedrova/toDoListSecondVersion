{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/tasks-reducer.ts","state/todolist-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItemHandler","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","className","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","axios","create","baseURL","withCredentials","headers","Task","task","removeTask","changeTaskStatus","changeTaskTitle","onTitleChangeHandler","useCallback","newValue","id","status","Completed","Checkbox","checked","newStatusValue","New","Delete","TodoList","taskId","taskID","addTask","changeTodoListTitle","setAllFilterValue","changeTodoListFilter","setActiveFilterValue","setCompleteFilterValue","removeTodoList","tasks","map","style","paddingTop","Button","marginRight","size","todoListFilter","initState","initialState","date","Date","getDate","console","log","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todoListID","action","todoListId","type","RemoveTaskAC","AddTaskAC","newStatus","ChangeTaskStatusAC","ChangeTaskTitleAC","RemoveTodoListAC","addTodoList","titleTL","v1","newFilterValue","ChangeTodoListFilterAC","todoListComponents","tl","newArr","todoList","filter","getTasksForTodoList","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","newTask","description","completed","priority","Middle","startDate","deadline","order","addedDate","copyState","updatedTasks","newTodoList","Number","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8cc1077.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3356848e-44a4-478d-85f0-1e1fabb15c46'\r\n    }\r\n});\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: number\r\n    order: number\r\n    title: string\r\n}\r\n\r\n\r\n\r\nexport type CommonResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later= 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type GetTasksResponse = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport const todoApi = {\r\n    //methods on todolists\r\n    getTodos() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodo(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodo(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodoTitle(todolistId: string, title: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    //methods on tasks\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n\r\n}\r\n\r\n","import React, { useState, ChangeEvent, KeyboardEvent } from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemPropsType) => {\r\n\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const addItemHandler = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(title);\r\n        } else {\r\n            setError(\"Title is required!\")\r\n        }\r\n        setTitle(\"\");\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === \"Enter\") {\r\n            addItemHandler();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                className={error ? \"error\" : \"\"}\r\n                error={!!error}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n            />\r\n            <IconButton onClick={addItemHandler} color={\"primary\"}>\r\n                <AddBox  />\r\n            </IconButton>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItemForm;","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        setTitle(title)\r\n    }\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            props.changeTitle(title);\r\n            setEditMode(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode ?\r\n            <TextField\r\n                color={\"primary\"}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n            />\r\n            /*<input\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                onBlur={offEditMode}\r\n\r\n            />*/\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n});\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId:string) => void\r\n    changeTaskStatus: (taskId:string, newStatusValue: TaskStatuses) => void\r\n    changeTaskTitle: (taskId: string, newValue: string) => void\r\n}\r\n\r\nexport const Task = React.memo((\r\n    {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle\r\n    }: TaskPropsType) => {\r\n\r\n    const onClickHandler = () => removeTask(task.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newStatusValue = e.currentTarget.checked;\r\n        changeTaskStatus(task.id, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New);\r\n    }\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        changeTaskTitle(task.id, newValue);\r\n    }, [changeTaskTitle, task.id])\r\n    return(\r\n        <div key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan title={task.title} changeTitle={onTitleChangeHandler} />\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n});","import React, {useCallback} from \"react\";\nimport AddItemForm from \"./AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Task} from \"./Task\";\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\nimport {FilterValuesType} from \"./state/todolist-reducer\";\n\n\n// \ntype TodoListPropsType = {\n    id: string\n    title: string,\n    todoListFilter: FilterValuesType,\n    tasks: Array<TaskType>,\n    addTask: (title: string, todoListID: string) => void,\n    removeTask: (taskID: string, todoListID: string) => void,\n    removeTodoList: (todoListID: string) => void,\n    changeTodoListFilter: (newFilterValue: FilterValuesType, todoListID: string) => void,\n    changeTaskStatus: (taskID: string, newStatus: TaskStatuses, todoListID: string) => void,\n    changeTaskTitle: (taskID: string, title: string, todoListID: string) => void,\n    changeTodoListTitle: (title: string, todoListID: string) => void\n}\n\n\nconst TodoList = React.memo((props: TodoListPropsType) => {\n\n    const removeTask = useCallback((taskId: string) => props.removeTask(taskId, props.id), [props.removeTask, props.id]);\n    const changeTaskStatus = useCallback((taskId: string, newStatusValue: TaskStatuses) => props.changeTaskStatus(taskId, newStatusValue, props.id), [props.changeTaskStatus, props.id]);\n    const changeTaskTitle = useCallback((title: string, taskID: string) => {\n        props.changeTaskTitle(taskID, title, props.id)\n    }, [props.changeTaskTitle, props.id]);\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id);\n    }, [props.addTask, props.id]);\n\n    const removeTodoList = () => {\n        props.removeTodoList(props.id)\n    }\n\n    const changeTodoListTitle = useCallback((title: string) => {\n        props.changeTodoListTitle(title, props.id)\n    }, [props.changeTodoListTitle, props.id]);\n    const setAllFilterValue = useCallback(() => props.changeTodoListFilter(\"all\", props.id), [props.changeTodoListFilter, props.id]);\n    const setActiveFilterValue = useCallback(() => props.changeTodoListFilter(\"active\", props.id), [props.changeTodoListFilter, props.id]);\n    const setCompleteFilterValue = useCallback(() => props.changeTodoListFilter(\"complete\", props.id), [props.changeTodoListFilter, props.id]);\n\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={addTask}/>\n            <div>\n                {\n                    props.tasks.map(task => <Task\n                        key={task.id}\n                        task={task}\n                        removeTask={removeTask}\n                        changeTaskStatus={changeTaskStatus}\n                        changeTaskTitle={changeTaskTitle}\n                    />)\n                }\n            </div>\n\n            <div style={{ paddingTop: \"10px\"}}>\n                <Button\n                    style={{marginRight: \"5px\"}}\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.todoListFilter === \"all\" ? \"outlined\" : \"contained\"}\n                    onClick={setAllFilterValue}\n                >All\n                </Button>\n                <Button\n                    style={{marginRight: \"5px\"}}\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.todoListFilter === \"active\" ? \"outlined\" : \"contained\"}\n                    onClick={setActiveFilterValue}\n                >Active\n                </Button>\n                <Button\n\n                    size={\"small\"}\n                    color={\"primary\"}\n                    variant={props.todoListFilter === \"complete\" ? \"outlined\" : \"contained\"}\n                    onClick={setCompleteFilterValue}\n                >Complete\n                </Button>\n\n            </div>\n        </div>\n\n    );\n});\n\nexport default TodoList;\n\n\n\n\n","import {v1} from \"uuid\";\r\nimport {AddTodoListType, RemoveTodoListType} from \"./todolist-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../api/todolist-api\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string] : Array<TaskType>\r\n}\r\n\r\ntype RemoveTaskType = {\r\n    type: \"REMOVE-TASK\"\r\n    taskID: string\r\n    todoListId: string\r\n}\r\n\r\ntype AddTaskType = {\r\n    type: \"ADD-TASK\"\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTaskTitleType = {\r\n    type: \"CHANGE-TASK-TITLE\"\r\n    taskID: string\r\n    title: string\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTaskStatus = {\r\n    type: \"CHANGE-TASK-STATUS\"\r\n    taskID: string\r\n    newStatus: TaskStatuses\r\n    todoListId: string\r\n}\r\n\r\ntype ActionType =\r\n      AddTaskType\r\n    | RemoveTaskType\r\n    | ChangeTaskStatus\r\n    | ChangeTaskTitleType\r\n    | AddTodoListType\r\n    | RemoveTodoListType;\r\n\r\nconst initState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = initState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-TASK\":\r\n\r\n            let newTask: TaskType = {description: `newTask number ${action.todoListId}`, title: action.title, completed: false, status:TaskStatuses.New, priority: TaskPriorities.Middle, startDate: `${new Date()}`, deadline:`${new Date().getDate() + 10}`, id: v1(), todoListId: action.todoListId, order: 1, addedDate: `${new Date()}`};\r\n            const copyState = {...state};\r\n            const updatedTasks = [newTask, ...copyState[action.todoListId]];\r\n            return {\r\n                ...copyState,\r\n                [action.todoListId]: updatedTasks\r\n            }\r\n        case \"REMOVE-TASK\": {\r\n            let copyState = {...state};\r\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.taskID)\r\n            return copyState;\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let copyState = {...state};\r\n            copyState[action.todoListId] = copyState[action.todoListId].map(task => task.id === action.taskID ? {\r\n                ...task,\r\n                status: action.newStatus\r\n            } : task);\r\n            return copyState;\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let copyState = {...state};\r\n            copyState[action.todoListId] = copyState[action.todoListId].map(task => task.id === action.taskID ? {\r\n                ...task,\r\n                title: action.title\r\n            } : task);\r\n            return copyState;\r\n        }\r\n\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoListId]: []}\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state};\r\n            delete copyState[action.todoListID]\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const AddTaskAC = (title: string, todoListId: string): AddTaskType => {\r\n    return {type: \"ADD-TASK\", title, todoListId}\r\n}\r\n\r\nexport const RemoveTaskAC = (taskID: string, todoListId: string): RemoveTaskType => {\r\n    return {\r\n        type: \"REMOVE-TASK\",\r\n        taskID,\r\n        todoListId\r\n    }\r\n}\r\n\r\nexport const ChangeTaskStatusAC = (taskID: string, newStatus: TaskStatuses, todoListId: string): ChangeTaskStatus => {\r\n    return {\r\n        type: \"CHANGE-TASK-STATUS\",\r\n        taskID,\r\n        newStatus,\r\n        todoListId\r\n    }\r\n}\r\n\r\nexport const ChangeTaskTitleAC = (taskID: string, title: string, todoListId: string): ChangeTaskTitleType => {\r\n    return {\r\n        type: \"CHANGE-TASK-TITLE\",\r\n        taskID,\r\n        title,\r\n        todoListId\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {TodolistType} from \"../api/todolist-api\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"complete\";\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type RemoveTodoListType = {\r\n    type: \"REMOVE-TODOLIST\"\r\n    todoListID: string\r\n}\r\n\r\nexport type AddTodoListType = {\r\n    type: \"ADD-TODOLIST\"\r\n    titleTL: string\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTodoListTitleType = {\r\n    type: \"CHANGE-TODOLIST-TITLE\"\r\n    titleTL: string\r\n    todoListId: string\r\n}\r\n\r\ntype ChangeTodoListFilterType = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    newFilterValue: FilterValuesType\r\n    todoListId: string\r\n}\r\n\r\ntype ActionType = RemoveTodoListType | AddTodoListType | ChangeTodoListTitleType | ChangeTodoListFilterType;\r\n\r\nlet initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todolistReducer = (todoLists: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = [...todoLists];\r\n            return copyState.filter(tl => tl.id !== action.todoListID);\r\n\r\n        case \"ADD-TODOLIST\": {\r\n            let copyState = [...todoLists];\r\n            const newTodoList: TodolistDomainType = {\r\n                id: action.todoListId,\r\n                addedDate: new Date().getDate(),\r\n                order: Number(new Date()),\r\n                title: action.titleTL,\r\n                filter: \"all\"\r\n            }\r\n            return [...copyState, newTodoList];\r\n\r\n            /*id: string\r\n            addedDate: Date\r\n            order: number\r\n            title: string*/\r\n\r\n\r\n        }\r\n        case \"CHANGE-TODOLIST-TITLE\": {\r\n            let copyState = [...todoLists];\r\n            return copyState.map(tl => tl.id === action.todoListId ? {...tl, title: action.titleTL} : tl)\r\n        }\r\n        case \"CHANGE-TODOLIST-FILTER\": {\r\n            let copyState = [...todoLists];\r\n            return copyState.map(tl => tl.id === action.todoListId ? {...tl, filter: action.newFilterValue} : tl)\r\n        }\r\n        default:\r\n            return todoLists;\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (todoListID: string): RemoveTodoListType => {\r\n    return {type: \"REMOVE-TODOLIST\", todoListID}\r\n}\r\n\r\nexport const AddTodoListAC = (titleTL: string): AddTodoListType => {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        titleTL,\r\n        todoListId: v1()\r\n    }\r\n}\r\n\r\nexport const ChangeTodoListTitleAC = (titleTL: string, todoListId: string): ChangeTodoListTitleType => {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-TITLE\",\r\n        titleTL,\r\n        todoListId\r\n    }\r\n}\r\n\r\nexport const ChangeTodoListFilterAC = (newFilterValue: FilterValuesType, todoListId: string): ChangeTodoListFilterType => {\r\n    return {\r\n        type: \"CHANGE-TODOLIST-FILTER\",\r\n        newFilterValue,\r\n        todoListId\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback} from \"react\";\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {AddTaskAC, ChangeTaskStatusAC, ChangeTaskTitleAC, RemoveTaskAC, TasksStateType} from \"./state/tasks-reducer\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC,\r\n    FilterValuesType,\r\n    RemoveTodoListAC,\r\n    TodolistDomainType,\r\n} from \"./state/todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskStatuses} from \"./api/todolist-api\";\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        const action = RemoveTaskAC(taskID, todoListID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        const action = AddTaskAC(title, todoListId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskStatus = useCallback((taskID: string, newStatus: TaskStatuses, todoListID: string) => {\r\n        const action = ChangeTaskStatusAC(taskID, newStatus, todoListID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n        dispatch(ChangeTaskTitleAC(taskID, title, todoListID));\r\n    }, [dispatch]);\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        const action = RemoveTodoListAC(todoListID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        const action = AddTodoListAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\r\n        const action = ChangeTodoListTitleAC(title, todoListID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTodoListFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        const action = ChangeTodoListFilterAC(newFilterValue, todoListID);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    function getTasksForTodoList(todoList: TodolistDomainType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(task => task.status === TaskStatuses.New)\r\n            case 'complete':\r\n                return tasks[todoList.id].filter(task => task.status === TaskStatuses.Completed)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    const todoListComponents = todoLists.map(tl => {\r\n        let newArr = getTasksForTodoList(tl)\r\n        // console.log(newArr)\r\n\r\n        return (\r\n\r\n            <Grid item={true} key={tl.id}>\r\n                <Paper elevation={6} style={{padding: \"20px\"}}>\r\n                    <TodoList\r\n\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        todoListFilter={tl.filter}\r\n                        tasks={newArr}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            Hello Tatiana\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container={true} style={{padding: \"20px 0px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container={true} spacing={5}>\r\n                    {todoListComponents}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst date = new Date().getDate();\r\nconsole.log(date);\r\nexport default AppWithRedux;\r\n\r\n\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport {todolistReducer} from \"./todolist-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppWithRedux from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}